// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  SUPER_ADMIN
  ADMIN
  WAREHOUSE_CONTROLLER
  ENGINEER
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
  DEACTIVATED
}

enum TRANSACTION_STATUS {
  WAITING
  ON_PROCESS
  ON_DELIVERY
  CONFIRMED_RECEIVED
  ON_RETURN
  CONFIRMED_RETURNED
}

// value lowercase
enum UNIT {
  UNIT
  PCS
  SETS
  ROLL
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email  String      @unique
  hash   String
  hashRT String?
  status USER_STATUS @default(ACTIVE)
  role   ROLE        @default(USER)

  // relations
  Transaction Transaction[]

  Profile   Profile   @relation(fields: [profileId], references: [id])
  profileId String    @unique
  Project   Project[]

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  first_name String
  last_name  String
  position   String?
  address    String?
  contact    String?
  avatarUrl  String?

  // relations
  User User?

  @@map("profiles")
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int
  status   TRANSACTION_STATUS @default(WAITING)
  remarks  String?

  //slip
  release_slip_num       String?
  materials_issuance_num String?
  gate_pass_num          String?
  return_slip_num        String?

  // relations
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Item      Item?    @relation(fields: [itemId], references: [id])
  itemId    String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@map("transactions")
}

model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  address String

  // relations
  Transaction Transaction[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?

  @@map("projects")
}

model Item {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?
  model       String
  unit        UNIT    @default(UNIT)
  // stock       STOCK   @default(OUT_OF_STOCK)
  quantity    Int     @default(0)
  price       Float
  pictureUrl  String?

  // relations
  Transaction Transaction[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Brand      Brand?    @relation(fields: [brandId], references: [id])
  brandId    String?

  @@map("items")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  // relations
  Item Item[]

  @@map("categories")
}

model Brand {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  // relations
  Item Item[]

  @@map("brands")
}
